:DOC-CONFIG:
# Tangle by default to config.el
#+property: header-args:emacs-lisp :tangle config.el
#+property: header-args :mkdirp yes :comments no
#+startup: fold
:END:

#+title: Doom Emacs Configuration
#+author: Eearslya Sleiarion
#+email: eearslya@gmail.com

#+begin_quote
"Emacs is like a laser guided missile. It only has to be slightly mis-configured to ruin your whole day."
--- Sean McGrath
#+end_quote

* Overview
This is a literate configuration file for [[https://github.com/doomemacs/doomemacs][Doom Emacs]].
Emacs has been my editor of choice for several years now, and Doom Emacs provides a very well-structured framework to take a lot of the grunt work out of getting a good IDE out of it.

Doom Emacs uses three main configuration files:
- =init.el= defines which of the Doom Emacs [[https://github.com/doomemacs/doomemacs/blob/master/docs/modules.org][Modules]] are enabled. Modules are a collection of packages and configuration focused towards a specific task.
- =packages.el= defines any other user-defined packages we wish to install.
- =config.el= is the main configuration file, where almost all settings will end up.

All three of these files are generated from this file using [[https://orgmode.org/][Org Mode]]'s [[https://orgmode.org/manual/Extracting-Source-Code.html][Tangling]] functionality.

** File Headers
First, we give each of these configuration files a header.
This helps serve as a reminder that the files are auto-generated and should be modified here instead, as well as providing minor configuration for the Elisp within.
We also include the default commentary provided by Doom Emacs, as it contains valuable information about how these files work.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; -*-
;;
;; DO NOT EDIT THIS FILE DIRECTLY.
;; This file has been generated from the configuration contained within
;; the Org file "luna.org". Any changes made to this file will be
;; overwritten.
;;
;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!
;;
;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.
;;
;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).
#+end_src
#+html: </details>

#+html: <details><summary>packages.el</summary>
#+begin_src emacs-lisp :tangle packages.el
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el
;;
;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;;
;; To install SOME-PACKAGE from MELPA, ELPA or emacsmirror:
;; (package! some-package)
;;
;; To install a package directly from a remote git repo, you must specify a
;; `:recipe'. You'll find documentation on what `:recipe' accepts here:
;; https://github.com/radian-software/straight.el#the-recipe-format
;; (package! another-package
;;   :recipe (:host github :repo "username/repo"))
;;
;; If the package you are trying to install does not contain a PACKAGENAME.el
;; file, or is located in a subdirectory of the repo, you'll need to specify
;; `:files' in the `:recipe':
;; (package! this-package
;;   :recipe (:host github :repo "username/repo"
;;            :files ("some-file.el" "src/lisp/*.el")))
;;
;; If you'd like to disable a package included with Doom, you can do so here
;; with the `:disable' property:
;; (package! builtin-package :disable t)
;;
;; You can override the recipe of a built in package without having to specify
;; all the properties for `:recipe'. These will inherit the rest of its recipe
;; from Doom or MELPA/ELPA/Emacsmirror:
;; (package! builtin-package :recipe (:nonrecursive t))
;; (package! builtin-package-2 :recipe (:repo "myfork/package"))
;;
;; Specify a `:branch' to install a package from a particular branch or tag.
;; This is required for some packages whose default branch isn't 'master' (which
;; our package manager can't deal with; see radian-software/straight.el#279)
;; (package! builtin-package :recipe (:branch "develop"))
;;
;; Use `:pin' to specify a particular commit to install.
;; (package! builtin-package :pin "1a2b3c4d5e")
;;
;; Doom's packages are pinned to a specific commit and updated from release to
;; release. The `unpin!' macro allows you to unpin single packages...
;; (unpin! pinned-package)
;; ...or multiple packages
;; (unpin! pinned-package another-pinned-package)
;; ...Or *all* packages (NOT RECOMMENDED; will likely break things)
;; (unpin! t)
#+end_src
#+html: </details>

#+html: <details><summary>config.el</summary>
#+begin_src emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-
;;
;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!
;;
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
;; (setq user-full-name "John Doe"
;;       user-mail-address "john@doe.com")
;;
;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!
#+end_src
#+html: </details>

* Modules
First and most importantly, we decide which of Doom Emacs' many modules we want to enable.
Modules are split into several categories, and we'll go over each one.

#+html: <details><summary>init.el</summary>
#+begin_src emacs-lisp :tangle init.el :noweb no-export
(doom!
 :input
 <<Doom Input Modules>>

 :completion
 <<Doom Completion Modules>>

 :ui
 <<Doom UI Modules>>

 :editor
 <<Doom Editor Modules>>

 :emacs
 <<Doom Emacs Modules>>

 :term
 <<Doom Terminal Modules>>

 :checkers
 <<Doom Checker Modules>>

 :tools
 <<Doom Tools Modules>>

 :os
 <<Doom OS Modules>>

 :lang
 <<Doom Language Modules>>

 :email
 <<Doom E-Mail Modules>>

 :app
 <<Doom Application Modules>>

 :config
 <<Doom Configuration Modules>>
 )
#+end_src
#+html: </details>

** Input
These modules add additional input languages or keyboard layouts to Emacs.

The only module we're interested in here is for Japanese input, which is provided by [[https://github.com/koron/cmigemo][C/Migemo]].
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Input Modules
japanese
#+end_src

** Completion
These modules provide the framework for auto-completion functionality, which includes code completion, command suggestions, and file searches.

[[https://github.com/minad/corfu][CORFU]] stands for "COmpletion in Region FUnction". It will be the main module we use for code completion. We add the =icons= option for some additional eye candy, and the =orderless= option for multi-component completion.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Completion Modules
(corfu +icons +orderless)
#+end_src

[[https://github.com/minad/vertico][VERTICO]] stands for "VERTical Interactive COmpletion". It provides a quick and performant auto-completion UI for commands, files, code, you name it. We add the =icons= option for additional iconography next to files and buffers.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Completion Modules
(vertico +icons)
#+end_src

** UI
These modules adjust the look and feel of Emacs.

This module provides the core theme for Doom Emacs and is responsible for doing a lot of the heavy lifting for Doom's signature appearance.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
doom
#+end_src

Doom Dashboard provides a splash screen upon initial startup that gives us a few customizable quick-access options to help us get right to where we need to be.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
doom-dashboard
#+end_src

Emacs has had built-in support for unicode emoji since version 29. The =emoji= module allows Emacs to automatically convert other kinds of emoji into their image counterparts, such as =:smile:= becoming ðŸ˜€.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
(emoji +github +unicode)
#+end_src

This is a simple addon that highlights "TODO" and other kinds of markers in org files or code comments.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
hl-todo
#+end_src

This gives us a fancier-looking mode line.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
modeline
#+end_src

This module provides op-hints (operation hinting), i.e. visual feedback for certain editing operations. It highlights regions of text that the last operation (like yank) acted on.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
ophints
#+end_src

This module provides a customizable popup window management system.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
(popup +defaults)
#+end_src

This module adds a bit more support for Unicode to support other languages.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
unicode
#+end_src

This module adds colored highlighting in the gutter on the left side to indicate changes and removals from version control systems.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
(vc-gutter +pretty)
#+end_src

This module adds small tilde (~) markers past the end of the buffer just like Vim, just for a little visual indicator.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
vi-tilde-fringe
#+end_src

This module allows us to have several "workspaces" open in a single Emacs session. Workspaces each have their own set of windows and buffers, allowing us to easily switch between projects when needed.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom UI Modules
workspaces
#+end_src

** Editor
These modules change the behavior of how we actually edit text within this text editor.

First and most importantly, we enable Evil mode. This brings all of the keybinds and general behavior of Vim to Emacs. We also enable the =everywhere= option to ensure this behavior works, well, everywhere.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Editor Modules
(evil +everywhere)
#+end_src

This module allows us to define templates for when we open a brand-new file, depending on its type.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Editor Modules
file-templates
#+end_src

This module allows us to "fold" sections of code, essentially collapsing it and keeping our editing buffer clear to focus on what we need to see.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Editor Modules
fold
#+end_src

This module is responsible for keeping our code styled and neat. We enable the =onsave= option to ensure all formatting is applied right away when the file is saved.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Editor Modules
(format +onsave)
#+end_src

** Emacs
These modules augment and improve the default behavior of Emacs.

This module applies some changes and configuration to the default directory browser, =dired=. We enable the =icons= option for a prettier view.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Emacs Modules
(dired +icons)
#+end_src

This module changes the default indentation behavior with =TAB= to be code- and context-aware, so that indentation snaps to where it should be instead of always just pushing forward.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Emacs Modules
electric
#+end_src

This module augments Emacsâ€™ built-in undo system to be more intuitive and to persist across Emacs sessions.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Emacs Modules
undo
#+end_src

This module augments Emacs builtin version control support and provides better integration with =git=.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Emacs Modules
vc
#+end_src

** Terminal
These modules provide terminal emulation support, to access the OS command line from within Emacs.

For right now, we will simply use the =eshell= module, as that is entirely written in Elisp and works on all platforms without additional setup.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Terminal Modules
eshell
#+end_src

** Checkers
These modules provide syntactic and spelling/grammar checkers.

From this category, all we want right now is syntax checking, provided by Flycheck.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Checker Modules
(syntax +icons)
#+end_src

** Tools
These are the many tools that Emacs can integrate with.

This module provides some amount of debugger support when dealing with code, though it can be tricky to set up.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Tools Modules
(debugger +lsp)
#+end_src

This module leverages =editorconfig= to help decide what code style to use when dealing with other peoples' codebases.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Tools Modules
editorconfig
#+end_src

This module allows quick and easy access to evaluate code blocks under the cursor and display the results in a small popup.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Tools Modules
(eval +overlay)
#+end_src

This module adds code navigation and documentation lookup tools to help you quickly look up definitions, references, documentation, dictionary definitions or synonyms.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Tools Modules
lookup
#+end_src

This module integrates language servers into Doom Emacs. They provide features youâ€™d expect from IDEs, like code completion, realtime linting, language-aware xref integration, jump-to-definition/references support, and more.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Tools Modules
lsp
#+end_src

This module provides a friendly and powerful user interface for git, courtesy of Magit.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Tools Modules
magit
#+end_src

This module enables a more powerful and capable system for parsing code languages, allowing for better syntax highlighting.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Tools Modules
tree-sitter
#+end_src

** Operating System
These modules improve compatibility with various operating systems.

The only module we need from here is to provide extra support for MacOS.
#+begin_src emacs-lisp :tangle no :noweb-ref Doom OS Modules
(:if (featurep :system 'macos) macos)
#+end_src

** Languages
These modules provide all of the support for the various programming languages we may be editing.

#+begin_src emacs-lisp :tangle no :noweb-ref Doom Language Modules
(cc +lsp +tree-sitter)
emacs-lisp
(javascript +tree-sitter)
(json +tree-sitter)
(markdown +grip)
org
(ruby +lsp +rails +rvm +tree-sitter)
(sh +tree-sitter)
(web +tree-sitter)
yaml
#+end_src

** Configuration
#+begin_src emacs-lisp :tangle no :noweb-ref Doom Configuration Modules
(default +bindings +smartparens)
#+end_src

* General Configuration
We start simple, defining our user information.
#+begin_src emacs-lisp
(setq user-full-name "Eearslya Sleiarion"
      user-mail-address "eearslya@gmail.com")
#+end_src

Enable line numbers everywhere.
#+begin_src emacs-lisp
(setq display-line-numbers-type t)
#+end_src

Start with the window maximized.
#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src

* Programming
Use =org-auto-tangle= to automatically tangle Org files with code, just like this one.
#+begin_src emacs-lisp :tangle packages.el
(package! org-auto-tangle)
#+end_src

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t))
#+end_src

Enforce a 2-space indentation width for everything we use.
#+begin_src emacs-lisp
(setq-default
 indent-tabs-mode nil
 tab-width 2)
(setq-hook! c-mode
  c-basic-offset 2)
(setq-hook! c++-mode
  c-basic-offset 2)
#+end_src
