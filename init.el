;;; init.el -*- lexical-binding: t; -*-
;;
;; DO NOT EDIT THIS FILE DIRECTLY.
;; This file has been generated from the configuration contained within
;; the Org file "luna.org". Any changes made to this file will be
;; overwritten.
;;
;; This file controls what Doom modules are enabled and what order they load
;; in. Remember to run 'doom sync' after modifying it!
;;
;; NOTE Press 'SPC h d h' (or 'C-h d h' for non-vim users) to access Doom's
;;      documentation. There you'll find a link to Doom's Module Index where all
;;      of our modules are listed, including what flags they support.
;;
;; NOTE Move your cursor over a module's name (or its flags) and press 'K' (or
;;      'C-c c k' for non-vim users) to view its documentation. This works on
;;      flags as well (those symbols that start with a plus).
;;
;;      Alternatively, press 'gd' (or 'C-c c d') on a module to browse its
;;      directory (for easy access to its source code).

(doom!
 :input
 japanese

 :completion
 (corfu +icons +orderless)
 (vertico +icons)

 :ui
 doom
 doom-dashboard
 (emoji +github +unicode)
 hl-todo
 modeline
 ophints
 (popup +defaults)
 unicode
 (vc-gutter +pretty)
 vi-tilde-fringe
 workspaces

 :editor
 (evil +everywhere)
 file-templates
 fold
 (format +onsave)

 :emacs
 (dired +icons)
 electric
 undo
 vc

 :term
 eshell

 :checkers
 (syntax +icons)

 :tools
 (debugger +lsp)
 editorconfig
 (eval +overlay)
 lookup
 lsp
 magit
 tree-sitter

 :os
 (:if (featurep :system 'macos) macos)

 :lang
 (cc +lsp +tree-sitter)
 emacs-lisp
 (javascript +tree-sitter)
 (json +tree-sitter)
 (markdown +grip)
 org
 (ruby +lsp +rails +rvm +tree-sitter)
 (sh +tree-sitter)
 (web +tree-sitter)
 yaml

 :email
 

 :app
 

 :config
 (default +bindings +smartparens)
 )
